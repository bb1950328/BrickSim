name: CMake Build
on:
  pull_request:
  push:
    branches:
      - master
      - stable
      - "#59_texmap"
    paths-ignore:
      - "docs/**"
      - '**/*.md'
env:
  BUILD_TYPE: Release
jobs:
  buildLinux:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip linux ci')"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, bits: 64 },
        ]

    name: Linux Build (${{ matrix.bits }} bit / ${{ matrix.arch }})

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup Workspace
      run: ./setup_workspace.sh

    - if: "contains(github.event.head_commit.message, 'codeql')"
      name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Create Build Directory
      run: mkdir -p ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}

    - run: ls -l /usr/lib | grep linux
    - run: ls -l /usr

    - name: install ccache
      run: sudo apt install ccache

    - name: Get timestamp
      run: echo "::set-output name=timestamp::$(date --iso-8601=seconds)"
      id: get_timestamp

    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/.ccache
        key: ccache-${{ runner.os }}-${{ matrix.arch }}-${{ steps.get_timestamp.outputs.timestamp }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.arch }}-

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_LIBRARY_PATH=/usr/lib/${{ matrix.arch }}-linux-gnu -G Ninja
      env:
        CC: gcc-10
        CXX: g++-10
        CFLAGS: -m${{ matrix.bits }}
        LDFLAGS: -m${{ matrix.bits }}
        CXXFLAGS: -m${{ matrix.bits }}

        CCACHE_BASEDIR: ${{runner.workspace}}
        CCACHE_DIR: ${{runner.workspace}}/.ccache
        CCACHE_COMPRESS: true
        CCACHE_COMPRESSLEVEL: 6
        CCACHE_MAXSIZE: 500M

#    - name: get info
#      run: |
#        gcc --version
#        whereis gcc
#        echo "runner.workspace: \"${{runner.workspace}}\""

    - name: Build
      working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}
      shell: bash
      run: |
        ccache -z # zero statistics
        cmake --build . --target BrickSim BrickSimTests --config $BUILD_TYPE -j $(nproc --all)
        ccache -s # print statistics
      env:
        CCACHE_BASEDIR: ${{runner.workspace}}
        CCACHE_DIR: ${{runner.workspace}}/.ccache
        CCACHE_COMPRESS: true
        CCACHE_COMPRESSLEVEL: 6
        CCACHE_MAXSIZE: 500M

    - if: "contains(github.event.head_commit.message, 'codeql')"
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      with:
        config-file: ./.github/codeql/codeql-config.yml

    - name: list all binaries in runner workspace
      run: find ${{runner.workspace}} -type f -executable

    - name: BrickSimRawBinary
      uses: actions/upload-artifact@v2
      with:
        name: BrickSimRawBinary_Linux${{ matrix.bits }}
        path: |
          ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}/BrickSim

    - name: Upload BrickSimTests
      uses: actions/upload-artifact@v2
      with:
        name: BrickSimTests_Linux${{ matrix.bits }}
        path: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}/BrickSimTests
  testLinux:
    name: Linux Tests
    needs: buildLinux
    runs-on: ubuntu-latest
    steps:
      - name: Download test artifact
        uses: actions/download-artifact@v2
        with:
          name: BrickSimTests_Linux64

      - name: Make tests executable
        run: chmod a+x ${{runner.workspace}}/BrickSim/BrickSimTests

      - name: ldd the executable
        if: always()
        run: ldd ${{runner.workspace}}/BrickSim/BrickSimTests

      - name: Run tests with JUnit XML output
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -r junit > ${{runner.workspace}}/junitTestReport_Linux64.xml

      - name: Run tests with Catch2 XML output
        if: always()
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -d yes -r xml > ${{runner.workspace}}/catchTestReport_Linux64.xml

      - name: Print report to log
        run: cat ${{runner.workspace}}/catchTestReport_Linux64.xml
        if: always()

      - name: Run tests with Console output
        if: failure()
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -d yes

#todo publish only one comment for all platforms
      #- name: Publish Test Result Comment
      #  if: failure()
      #  run: |
      #    pip3 install PyGithub
      #    wget -O ${{runner.workspace}}/publish_test_results.py https://raw.githubusercontent.com/bb1950328/BrickSim/${GITHUB_REF##*/}/.github/workflows/publish_test_results.py
      #    python3 ${{runner.workspace}}/publish_test_results.py ${{runner.workspace}}/catchTestReport.xml ${{ github.token }} ${{ github.sha }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: UnitTestReport_Linux64
          path: ${{runner.workspace}}/*TestReport*.xml

  buildInstallerLinux:
    needs: buildLinux
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, bits: 64 },
        ]

    name: Linux Installer Build (${{ matrix.bits }} bit / ${{ matrix.arch }})

    steps:
      - name: Setup cache of InstallBuilder installer
        id: installbuilder-installer-cache
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}/installbuilder_installer.run
          key: installbuilder-21.6.0-linux-x64-installer-2
      - name: Download InstallBuilder installer on cache miss
        if: steps.installbuilder-installer-cache.outputs.cache-hit != 'true'
        working-directory: ${{ runner.workspace }}
        #WARNING: if you change the version here, also change it in the cache key
        run: wget https://installbuilder.com/installbuilder-enterprise-21.6.0-linux-x64-installer.run -O installbuilder_installer.run
      - name: Install InstallBuilder
        working-directory: ${{ runner.workspace }}
        run: |
          chmod a+x installbuilder_installer.run
          ./installbuilder_installer.run --mode unattended --prefix ${{ runner.workspace }}/installbuilder

      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BrickSimRawBinary_Linux${{ matrix.bits }}
          path: ${{ runner.workspace }}/artifacts

      - name: Create build directory and copy raw binary to it
        run: |
          mkdir -p $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}
          cp ${{ runner.workspace }}/artifacts/BrickSim $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}
          chmod a+x $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}/BrickSim

      - name: Save license to file
        run: echo "${{ secrets.INSTALLBUILDER_LICENSE_XML_BASE64 }}" | base64 --decode > ${{ runner.workspace }}/license.xml

      - name: Build Installer
        run: |
          ${{ runner.workspace }}/installbuilder/bin/builder build $GITHUB_WORKSPACE/InstallBuilder.xml linux-x64 \
                        --setvars project.version=$($GITHUB_WORKSPACE/scripts/get_git_tag.sh | tr -d v) --license ${{ runner.workspace }}/license.xml
      - name: Delete license file
        run: rm ${{ runner.workspace }}/license.xml

      - name: Upload BrickSimInstaller
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimInstaller_Linux${{ matrix.bits }}
          path: ${{runner.workspace}}/installbuilder/output/*.run


  buildWindows:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip windows ci')"
    runs-on: windows-latest

    name: Windows Build (64 bit / x86_64)

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            unzip
            mingw-w64-x86_64-toolchain
            base-devel
            mingw-w64-x86_64-cmake
            libcurl-devel
            mingw-w64-x86_64-freeglut
            mingw-w64-x86_64-glm

      - name: Setup workspace
        run: ./setup_workspace.sh

      - name: Install ccache
        run: pacman -S mingw-w64-x86_64-ccache --noconfirm --needed

      - name: Get timestamp
        run: echo "::set-output name=timestamp::$(date --iso-8601=seconds)"
        id: get_timestamp

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/.ccache
          key: ccache-${{ runner.os }}-x86_64-${{ steps.get_timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-${{ runner.os }}-x86_64-

      - name: Build
        env:
          CC: /C/msys64/mingw64/bin/gcc.exe
          CXX: /C/msys64/mingw64/bin/g++.exe

          CCACHE_BASEDIR: ${{runner.workspace}}
          CCACHE_DIR: ${{runner.workspace}}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 500M
        run: |
          mkdir -p cmake-build/release64
          cd cmake-build/release64
          cmake -G "MSYS Makefiles" ../.. -DCMAKE_PREFIX_PATH=/C/mingw64 -DCMAKE_MAKE_PROGRAM=/C/msys64/usr/bin/make.exe \
            -DGIT_COMMIT_HASH:STRING=$(./scripts/get_git_commit_hash.sh) -DGIT_COMMIT_COUNT:STRING=$(../../scripts/get_git_commit_count.sh) \
            -DTOTAL_HOURS:STRING=$(../../scripts/get_git_total_hours.sh) -DGIT_VERSION_TAG:STRING=$(../../scripts/get_git_tag.sh) \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          ccache -z # zero statistics
          cmake --build . --target BrickSim BrickSimTests --config Release  -j $(nproc --all)
          ccache -s # print statistics

      - name: Upload BrickSimRawBinary
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimRawBinary_Windows64
          path: ${{runner.workspace}}\BrickSim\cmake-build\release64\BrickSim.exe
      - name: Upload BrickSimTests
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimTests_Windows64
          path: ${{runner.workspace}}\BrickSim\cmake-build\release64\BrickSimTests.exe

  buildInstallerWindows:
    needs: buildWindows
    runs-on: windows-latest

    name: Windows Installer Build (64 bit / x86_64)

    steps:
      - name: Setup cache of InstallBuilder installer
        id: installbuilder-installer-cache
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}/installbuilder_installer.exe
          key: installbuilder-enterprise-21.6.0-windows-x64-installer

      - name: Download InstallBuilder installer on cache miss
        if: steps.installbuilder-installer-cache.outputs.cache-hit != 'true'
        working-directory: ${{ runner.workspace }}
        shell: powershell
        #WARNING: if you change the version here, also change it in the cache key
        run: Invoke-WebRequest -Uri https://installbuilder.com/installbuilder-enterprise-21.6.0-windows-x64-installer.exe -OutFile installbuilder_installer.exe
      - name: Install InstallBuilder
        working-directory: ${{ runner.workspace }}
        shell: powershell
        run: |
          Start-Process -FilePath installbuilder_installer.exe -ArgumentList "--mode unattended --prefix ${{ runner.workspace }}\installbuilder"

      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BrickSimRawBinary_Windows64
          path: ${{ runner.workspace }}/artifacts

      - name: Create build directory and copy raw binary to it
        shell: powershell
        run: |
          New-Item "${{ runner.workspace }}/BrickSim/cmake-build/release64" -ItemType Directory
          Copy-Item "${{ runner.workspace }}/artifacts/BrickSim.exe" -Destination "${{ runner.workspace }}/BrickSim/cmake-build/release64"

      - name: Save license to file
        shell: powershell
        run: |
          [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String("${{ secrets.INSTALLBUILDER_LICENSE_XML_BASE64 }}")) | Out-File -FilePath ${{ runner.workspace }}/license.xml

      - name: Build Installer
        shell: powershell
        run: |
          $VERSION = git describe --tags --match v[0-9]* --abbrev=0
          $VERSION = $VERSION -replace "v"
          
          New-Item -ItemType directory -Path ${{runner.workspace}}\installbuilder\output
          Start-Process -FilePath "${{ runner.workspace }}\installbuilder\bin\builder-cli.exe" -Wait -NoNewWindow `
            -ArgumentList "build ${{ runner.workspace }}\BrickSim\InstallBuilder.xml windows-x64 --setvars project.version=$VERSION project.outputDirectory=${{runner.workspace}}\installbuilder\output --license ${{ runner.workspace }}\license.xml"

      - name: Delete license file
        shell: powershell
        run: Remove-Item -Path ${{ runner.workspace }}/license.xml

      - name: Upload BrickSimInstaller
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimInstaller_Windows64
          path: ${{runner.workspace}}\installbuilder\output\*.exe

  testWindows:
    runs-on: windows-latest

    needs: buildWindows

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, bits: 64 },
          #{ arch: i686, bits: 32 }
        ]

    name: Windows Tests (64 bit / x86_64)

    steps:
      - name: Download test artifact
        uses: actions/download-artifact@v2
        with:
          name: BrickSimTests_Windows64

      - name: Get info about the .exe
        shell: powershell
        run: Get-Command "${{runner.workspace}}\BrickSim\BrickSimTests.exe" | Format-List

      - name: Run tests with JUnit XML output
        shell: powershell
        run: Start-Process -FilePath ${{runner.workspace}}\BrickSim\BrickSimTests.exe -ArgumentList "-r junit" -Wait -NoNewWindow -RedirectStandardOutput ${{runner.workspace}}\junitTestReport_Windows64.xml

      - name: Run tests with Catch2 XML output
        shell: powershell
        run: Start-Process -FilePath ${{runner.workspace}}\BrickSim\BrickSimTests.exe -ArgumentList "-d yes -r xml" -Wait -NoNewWindow -RedirectStandardOutput ${{runner.workspace}}\catchTestReport_Windows64.xml

      - name: Print report to log
        shell: powershell
        run: Get-Content ${{runner.workspace}}\catchTestReport_Windows64.xml
        if: always()

      - name: Run tests with Console output
        if: always()
        shell: powershell
        run: Start-Process -FilePath ${{runner.workspace}}\BrickSim\BrickSimTests.exe -ArgumentList "-d yes" -Wait -NoNewWindow

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: UnitTestReport_Windows64
          path: ${{runner.workspace}}/*TestReport*.xml

  buildMac:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip mac ci')"
    runs-on: macos-latest

    name: MacOS Build

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, name: 64 },
          { arch: arm64, name: ARM }
        ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Workspace
        run: ./setup_workspace.sh

      - name: Create Build Environment
        run: mkdir -p $GITHUB_WORKSPACE/cmake-build/release${{ matrix.name }}

      - name: Install ccache
        run: brew install ccache

      - name: Get timestamp
        run: echo "::set-output name=timestamp::$(date --iso-8601=seconds)"
        id: get_timestamp

      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-${{ steps.get_timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.name }}
        run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" -G Ninja
        env:
          CC: clang
          CXX: clang++

          CCACHE_BASEDIR: ${{runner.workspace}}
          CCACHE_DIR: ${{runner.workspace}}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 500M

      - name: get info
        run: |
          echo "runner.workspace: \"${{runner.workspace}}\""

      - name: Build
        working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.name }}
        shell: bash
        run: |
          ccache -z # zero statistics
          cmake --build . --target BrickSim --config $BUILD_TYPE -j $(sysctl -n hw.logicalcpu)
          ccache -s # print statistics
        env:
          CCACHE_BASEDIR: ${{runner.workspace}}
          CCACHE_DIR: ${{runner.workspace}}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 500M

      - name: Try to get info
        if: always()
        shell: bash {0}
        run: |
          for f in /Users/runner/Library/Logs/DiagnosticReports/clang*
          do
              echo "**** File $f ****"
              cat "$f"
          done

          for f in /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/*
          do
              echo "**** File $f ****"
              cat "$f"
          done



      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimRawBinary_Mac${{ matrix.name }}
          path: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.name }}/BrickSim

  buildInstallerMac:
    needs: buildMac
    runs-on: macos-latest

    name: Mac Installer Build

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, name: 64 },
          { arch: arm64, name: ARM }
        ]

    steps:
      - name: Setup cache of InstallBuilder installer
        id: installbuilder-installer-cache
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}/installbuilder_installer.dmg
          key: installbuilder-enterprise-21.6.0-osx-installer-2

      - name: Download InstallBuilder installer on cache miss
        if: steps.installbuilder-installer-cache.outputs.cache-hit != 'true'
        working-directory: ${{ runner.workspace }}
        #WARNING: if you change the version here, also change it in the cache key
        run: |
          brew install wget
          wget -nv https://installbuilder.com/installbuilder-enterprise-21.6.0-osx-installer.dmg -O installbuilder_installer.dmg

      - name: Install InstallBuilder
        working-directory: ${{ runner.workspace }}
        run: |
          hdiutil attach -noverify installbuilder_installer.dmg
          ls -l -R "/Volumes/InstallBuilder Enterprise"
          /Volumes/InstallBuilder\ Enterprise/installbuilder-enterprise-21.6.0-osx-installer.app/Contents/MacOS/installbuilder.sh \
                  --mode unattended --prefix ${{ runner.workspace }}/installbuilder
          #sudo hdiutil detach "/Volumes/InstallBuilder Enterprise"
        #todo find out why the previous line causes error "hdiutil: couldn't unmount "disk2" - Resource busy"

      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BrickSimRawBinary_Mac${{ matrix.name }}
          path: ${{ runner.workspace }}/artifacts

      - name: Create build directory and copy raw binary to it
        run: |
          mkdir -p $GITHUB_WORKSPACE/cmake-build/release${{ matrix.name }}
          cp ${{ runner.workspace }}/artifacts/BrickSim $GITHUB_WORKSPACE/cmake-build/release${{ matrix.name }}
          chmod a+x $GITHUB_WORKSPACE/cmake-build/release${{ matrix.name }}/BrickSim

      - name: Save license to file
        run: echo "${{ secrets.INSTALLBUILDER_LICENSE_XML_BASE64 }}" | base64 --decode > ${{ runner.workspace }}/license.xml

      - name: Build Installer
        run: |
          ${{ runner.workspace }}/installbuilder/bin/builder build $GITHUB_WORKSPACE/InstallBuilder.xml osx \
                        --setvars project.version=$($GITHUB_WORKSPACE/scripts/get_git_tag.sh | tr -d v) \
                        --license ${{ runner.workspace }}/license.xml

      - name: Delete license file
        run: rm ${{ runner.workspace }}/license.xml

      - name: Upload BrickSimInstaller
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimInstaller_Mac${{ matrix.name }}
          path: ${{runner.workspace}}/installbuilder/output/*.app

  publishTestResults:
    name: Publish Catch2 Test Results
    needs:
      - testLinux
      - testWindows
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Download UnitTestReport_Linux64
        uses: actions/download-artifact@v2
        with:
          name: UnitTestReport_Linux64
          path: artifacts

      - name: Download UnitTestReport_Windows64
        uses: actions/download-artifact@v2
        with:
          name: UnitTestReport_Windows64
          path: artifacts
    
      - name: Split files by format
        run: |
          mkdir junitReports
          mkdir catchReports
          mv artifacts/*junit* junitReports
          mv artifacts/*catch* catchReports
      - run: ls -Rl
    
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: junitReports/*.xml
          check_name: Catch2 Test Results
          comment_title: Catch2 Test Results

