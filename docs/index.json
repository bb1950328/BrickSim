[{"body":"The installation process is different on each operating system.\nWindows\nLinux\nMac OS X\n","link":"https://BrickSim.org/docs/installation/","title":"Installation"},{"body":"BrickSim is licensed under GPLv3. The major reason for that choice is to prevent anyone with more resources than the maintainers and direct contributors of BrickSim from forking the project and overtaking it. With GPLv3 all forks must disclose their source too and that allows us to merge it back into the original BrickSim project.\nNot all libraries BrickSim uses are under the GPLv3 license, but they are more permissive than GPLv3, so it's possible to use them. All libraries and their licenses are listed here. This stackexchange answer explains this very well.\nTo make packaging and distributing easier, the license texts for each library and BrickSim itself are only distributed inside the binary. You can read them under \u0026quot;File\u0026quot; \u0026gt; \u0026quot;About\u0026quot; \u0026gt; \u0026quot;License\u0026quot;:\n","link":"https://BrickSim.org/docs/license/","title":"License"},{"body":"The following table lists all bigger features which are planned but not realized yet. Feel free to vote for them on their GitHub Issue.\n   Description GitHub Issue     Display a transform gizmo to translate and rotate things directly inside the 3D view #2   Save the model back to a .ldr or .mpd file #3   Customizable line thickness #5   Set camera origin to part location #7   Static analysis (just here for completeness, there's a separate page for this) Milestone #1   More sophisticated part search to handle queries like title=Hello OR name=World #8    ","link":"https://BrickSim.org/docs/features/planned/","title":"Planned Features"},{"body":"   Logo Description License      BrickSim uses C++. The main reason for this choice was execution speed. -    BrickSim is built using the platform-independent build system CMake. BSD 3-clause    The User Interface is made with Dear ImGui. MIT    OpenGL is used for rendering on all platforms. -    SQLite3 is used to save settings and cache to the disk. The library SQLiteCpp is used. Public Domain, MIT    Hugo is a static site generator using go. It is used in BrickSimWeb. Apache 2.0   mingw-std-threads to use std::thread on MinGW. BSD 2-clause license   GLFW to create a window and handle inputs. zlib/libpng   glad to load the OpenGL library MIT   Miniball to determine the smallest enclosing ball of points, for example to center the part thumbnails. GPLv3   stb_image.h and stb_image_write.h for image reading and writing. Public domain   tinyfiledialogs to open native file dialogs on all platforms. zlib/libpng    ","link":"https://BrickSim.org/docs/technical_info/technologies_dependencies/","title":"Technologies and dependencies"},{"body":"currently, the only way to run BrickSim on Windows is to build it from source. A .exe file will be provided as soon as I have figured out how to build it in GitHub Actions on Windows.\n","link":"https://BrickSim.org/docs/installation/windows/","title":"Windows"},{"body":"This page describes how to set up your workspace, so you can develop on BrickSim too.\nPreparation on Windows  Download MSYS2 from https://www.msys2.org/ and follow the installation instructions there. Execute the following command in a MSYS2 Shell to install git: pacman -S git  Preparation on MacOS  Execute the following command to install the XCode command line tools if you haven't already: sudo xcode-select --install  Preparation on Linux  Execute the following command to install git sudo apt install git  Setup the workspace  Do the platform-specific preparation Clone the repository by git clone --recurse-submodules -j8 https://github.com/bb1950328/BrickSim.git You can execute the setup_workspace.sh  Open the IDE The project is CMake-based, so your IDE should support CMake. I recommend you to use CLion.\nYou can follow this tutorial if you want to use VS Code on Windows. A tutorial for VS Code (#15), Visual Studio 2019 (#16) and XCode (#16) is in planning.\n","link":"https://BrickSim.org/docs/contributing/code/workspace_setup/","title":"Workspace Setup"},{"body":"If you want to contribute to the code, you should know the following things:\n How git and GitHub works How to code in C++ How Dear ImGui works (The Demo is included in BrickSim, the best way for me was to play around and then Ctrl+F for a display text to quickly navigate to the corresponding code lines)  If you don't know one of the technologies yet, there are many tutorials on the internet.\nIf you have an idea or a bug, please make a new issue and describe it as detailed as possible. Also mention that you want to implement it yourself. The maintainers will give you their OK if the issue is valid. After that you can start coding. This way you don't waste time for something which we won't accept.\nOf course, we accept as much as possible, but if something does not make sense, it is better not to accept it.\nBefore you start, make sure you read the technical documentation.\n","link":"https://BrickSim.org/docs/contributing/code/","title":"Code"},{"body":"All source files are located in the src/ Subfolder. The src/lib/ folder is for all third-party code.\n   Files Purpose Description     main.cpp Starter This file is the entry point and just creates the controller.   controller.h controller.cpp Controller The controller controls the program flow.   shaders/* Shaders This folder contains a Shader class which is used to load shaders and modify their state. The other files are the shaders itself, written in the GLSL language.   helpers/camera.h helpers/camera.cpp Camera object    helpers/util.h helpers/util.cpp Utils This files contain various utility functions.   helpers/zip_buffer.h helpers/zip_buffer.cpp .zip buffer Can load a .zip file into memory. You can then get the file content as std::string or std::stringstream   helpers/part_color_availability_provider.h helpers/part_color_availability_provider.cpp helpers/price_guide_provider.h helpers/price_guide_provider.cpp BrickLink info providers Load information about parts from www.bricklink.com   gui/gui.h gui/gui.cpp gui/gui_internal.h gui/gui_internal.cpp GUI Central GUI functionality   gui/window_*.cpp GUI windows There should be one file per window. If you add a new file, you should also add it in gui::drawMainWindows::windowFuncsAndState.   config.h config.cpp Configuration Get and set user preferences.   db.h db.cpp Database Access to the SQLite3 databases   element_tree.h element_tree.cpp Element Tree The element tree is the main data structure of BrickSim. It consists of different types of nodes.   ldr_colors.h ldr_colors.cpp LDraw Color class for LDraw color definition   ldr_file_repository.h ldr_file_repository.cpp LDraw File Repository All LDraw files are opened through this. It manages different types of part libraries (folder/zip) and caches the opened files.   ldr_files.h ldr_files.cpp LDraw File The LDraw file format is implemented here   mesh.h mesh.cpp Mesh All objects are displayed in 3D with a mesh. It can have multiple instances in multiple colors. It also contains the functionality to allocate buffers on the VRAM and draws the object using these buffers.   mesh_collection.h mesh_collection.cpp Mesh organisation The mesh collection organizes the meshes.   orientation_cube.h orientation_cube.cpp Orientation Cube These two files are used to render the orientation cube, a cube which shows the camera orientation.   part_finder.h part_finder.cpp Part finder As the name says, this provides the part search functionality.   renderer.h renderer.cpp Renderer This part of the program renders the 3D View.   thumbnail_generator.h thumbnail_generator.cpp Thumbnail Generator The thumbnails in the part palette window are rendered in these files.    ","link":"https://BrickSim.org/docs/technical_info/code_structure/","title":"Code structure"},{"body":" Go to CMake Linux Build, select the topmost run and download the \u0026quot;BrickSimLinux\u0026quot; artifact. Unzip it somewhere Open the terminal and go to the folder you unzipped the files Install the package using sudo apt install ./BrickSim.deb\nMaybe you will get a message like E: Unmet dependencies. Try 'apt --fix-broken install' with no packages (or specify a solution).\nAs the message already says, you have to execute apt --fix-broken install Run the program with BrickSim  If you want to uninstall it, execute sudo apt remove bricksim\n","link":"https://BrickSim.org/docs/installation/linux/","title":"Linux"},{"body":"Vision Imagine designing a large bridge with LEGO(R) parts. Wouldn't it be useful if you could see whether your construction is robust before you order the parts? Depending on that, you might even find a better solution that is stronger, uses fewer parts, or looks better.\nAll that should be possible - if you have the right software. Unfortunately, there's currently no software capable of doing a physics analysis of a LEGO model.\nBrickSim will change that.\nPlan / Ideas  The analysis model is just another object inside the element tree. The user can  hide it delete it enable automatic recomputing if his computer is fast enough or his model small enough   If the element is visible, the bricks should be displayed in rainbow colors over the original bricks (red means high stress, green means low stress)  Technical Implementation Part weight The weight of all parts that consist only of normal ABS plastic can be calculated relatively easily. We can calculate the volume using the method described in this paper or use a library like the GNU Triangulated Surface Library.\nWe can get the weights of each brick directly using the BrickLink Catalog Download. This is the only way to get the correct volume for all parts which contain non-ABS materials.\nConnections between parts A lot of information about how the parts can be connected is already available in the LDraw parts library. All parts are composed of primitives. The Primitive Reference lists them all. Unfortunately not all connections can be derived from primitives. For example the underside stud of a 1x1 brick isn't made from primitives. Therefore, we need a list to add additional connections.\nThis component can later be reused for part snapping.\nData Structure It's better to not use the element tree directly as the data structure. It should be simplified to a collection of parts because physics do not care about the part hierarchy of a model, and the code would just be unnecessarily complex.\n","link":"https://BrickSim.org/docs/features/static_analysis/","title":"Static Analysis"},{"body":"Read this section if you are interested how BrickSim is made.\n","link":"https://BrickSim.org/docs/technical_info/","title":"Technical Information"},{"body":" add C:\\msys64\\mingw64\\bin to PATH Download and install VS Code from here if you haven't already Install the extensions ms-vscode.cpptools and ms-vscode.cmake-tools Open the BrickSim folder in VS Code. you should get the notifications like in the following screenshot (at least the first one):\nclick \u0026quot;yes\u0026quot; on the first notification, we'll deal with the second one later. Now it's time to adjust some settings:  Press Ctrl + Shift+ P and type \u0026quot;preferences: Open Settings (JSON)\u0026quot;\nHit Enter or click the first result. add the following text: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  { \u0026#34;cmake.configureOnOpen\u0026#34;: true, \u0026#34;cmake.cmakePath\u0026#34;: \u0026#34;C:\\\\msys64\\\\mingw64\\\\bin\\\\cmake.exe\u0026#34;, \u0026#34;cmake.generator\u0026#34;: \u0026#34;MinGW Makefiles\u0026#34;, \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/cmake-build\u0026#34;, \u0026#34;cmake.mingwSearchDirs\u0026#34;: [ \u0026#34;C:\\\\msys64\\\\mingw64\\\\bin\u0026#34; ], \u0026#34;cmake.debugConfig\u0026#34;: { \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; }, \u0026#34;terminal.integrated.shell.windows\u0026#34;: \u0026#34;C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe\u0026#34;, \u0026#34;terminal.integrated.shellArgs.windows\u0026#34;: [\u0026#34;-li\u0026#34;], \u0026#34;terminal.integrated.env.windows\u0026#34;: { \u0026#34;MSYSTEM\u0026#34;: \u0026#34;MINGW64\u0026#34;, \u0026#34;CHERE_INVOKING\u0026#34;: \u0026#34;1\u0026#34;, }, }   Maybe you already have some settings here so make sure they don't contradict each other.\n Save the settings.json file. Now press Ctrl+Shift+P and type \u0026quot;CMake: Edit User-Local CMake Kits\u0026quot;\n Insert the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  [ { \u0026#34;name\u0026#34;: \u0026#34;Mingw64 GCC\u0026#34;, \u0026#34;compilers\u0026#34;: { \u0026#34;C\u0026#34;: \u0026#34;C:\\\\msys64\\\\mingw64\\\\bin\\\\gcc.exe\u0026#34;, \u0026#34;CXX\u0026#34;: \u0026#34;C:\\\\msys64\\\\mingw64\\\\bin\\\\g++.exe\u0026#34; }, \u0026#34;preferredGenerator\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;MinGW Makefiles\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;x64\u0026#34; }, \u0026#34;environmentVariables\u0026#34;: { \u0026#34;PATH\u0026#34;: \u0026#34;C:/msys64/mingw64/bin/\u0026#34; } } ]    Save the cmake-tools-kits.json file.   Download git for windows from here and install it if you want git integration in VS Code. Restart VS Code You should now be able to launch the application using the bottom status bar:\n  ","link":"https://BrickSim.org/docs/contributing/code/vscode_setup_windows/","title":"Using VS Code on Windows"},{"body":"sdafasdasdf\n","link":"https://BrickSim.org/docs/contributing/web/","title":"Website"},{"body":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\n Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community.  Examples of unacceptable behavior include:\n The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Submitting low-effort pull requests for an event like Hacktoberfest. You will waste your own time as well as the time of the maintainers so just don't do it. Other conduct which could reasonably be considered inappropriate in a professional setting  Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by tagging @bb1950328 if it's happening on GitHub Issues or otherwise by writing an e-mail to bb1950328@gmail.com. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n","link":"https://BrickSim.org/docs/contributing/code_of_conduct/","title":"Code of Conduct"},{"body":"GitHub Repositories BrickSim is an open-source project. This means that everyone can help improve the program. All files are on GitHub, divided into two repositories.\nThe main repo https://github.com/bb1950328/BrickSim/ contains all files for the program itself and a docs/ folder which has contains the project website. This folder is not meant to be edited by hand because the source files are in another repo (BrickSimWeb).\nOf course, it would be better if the docs/ folder was in the BrickSimWeb repository too, but the URL for GitHub Pages is the same as the repository name.\nThis GitHub Action Workflow synchronizes all changes from BrickSimWeb to BrickSim/docs.\nIf you want to contribute to the website (writing manuals etc.), you need to clone BrickSimWeb. More about contributing to the website can be found here.\nIf you want to contribute to the program itself, you need to clone BrickSim.\nGitHub Issue Tracker All issues that only have something to do with the documentation or the website should go on BrickSimWeb/issues. Everything else goes to BrickSim/issues.\nIf you have found a bug, have a question or feature request, check if there's already something in the docs about it. If there's nothing about it in the docs, search on GitHub Issues. In case you still don't have a satisfactory answer, don't hesitate to create a new issue.\nSecurity Issues Every program has bigger or smaller bugs. Unfortunately, some of them are security vulnerabilities. It is safer for all users if these are not publicly reported. If you found one, please write an e-mail directly to the creator of BrickSim (bb1950328@gmail.com).\n","link":"https://BrickSim.org/docs/contributing/","title":"Contributing"},{"body":"OpenGL  Khronos OpenGL Wiki OpenGL 3.3 Core Specification OpenGL Tutorial (Also available as PDF)  LDraw  LDraw Homepage File Format Specification !COLOUR Specification Back Face Culling Specification MPD Specification  ","link":"https://BrickSim.org/docs/technical_info/documents/","title":"External documents"},{"body":"currently, the only way to run BrickSim a Mac is to build it from source. A binary file will be provided as soon as I have found someone who knows how to build software on Mac OS X.\n","link":"https://BrickSim.org/docs/installation/osx/","title":"Mac OS X"},{"body":"This tutorial was tested on Ubuntu 20.10, but it should work too on other versions or distributions. You'll have to install packages manually if you don't have apt.\n Do all steps from here Install VS Code via a way described in the offical VS Code docs Open VS Code and install the ms-vscode.cpptools and ms-vscode.cmake-tools extensions Press Ctrl + Shift+ P and type \u0026quot;preferences: Open Settings (JSON)\u0026quot;\nHit Enter or click the first result and add the following text: 1 2 3 4 5 6  { \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/cmake-build\u0026#34;, \u0026#34;cmake.debugConfig\u0026#34;: { \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; }, }    Open the BrickSim folder in VS Code. You should get a notification like this one:\nClick \u0026quot;Yes\u0026quot; on that notification You will get a prompt looking like this: Select the one with /bin/gcc, the second last element on this screenshot The \u0026quot;Play\u0026quot; button in the bottom status bar doesn't choose the correct working directory as described in microsoft/vscode-cmake-tools#1395\nYou have to run it from the menu on the left side:   ","link":"https://BrickSim.org/docs/contributing/code/vscode_setup_linux/","title":"Using VS Code on Linux"},{"body":"This section gives you more information about the features of BrickSim.\n","link":"https://BrickSim.org/docs/features/","title":"Features"},{"body":"The codes.txt file contains all parts with the colors they are available in. Because it's unclear whether it's allowed to distribute that file together with the program, you have to download it manually. It's really simple:\n Go to https://www.bricklink.com/catalogDownload.asp Select \u0026quot;Part and Color Codes\u0026quot;. Also make sure \u0026quot;Tab-Delimited File\u0026quot; is selected. Click on the download button and save the file in the BrickSim folder  ","link":"https://BrickSim.org/docs/installation/get_codes_txt/","title":"How to get the codes.txt file"},{"body":" Download Visual Studio 2019 from here if you haven't already Install the C++ workload. The option \u0026quot;C++ CMake tools for Windows\u0026quot; is very important.  Clone the repository (https://www.github.com/bb1950328/BrickSim.git)  Install vcpkg like described here Navigate to the folder where you cloned vcpkg to and execute the following command: vcpkg.exe install freeglut:x64-windows libzip:x64-windows curl:x64-windows spdlog:x64-windows glm:x64-windows Execute the following command in the BrickSim repository root: mklink /H LICENSE.txt LICENSE PowerShell:  1 2 3 4 5  Expand-Archive \u0026#39;src\\lib\\rapidjson.zip\u0026#39; \u0026#39;src\\lib\u0026#39; Expand-Archive \u0026#39;src\\lib\\glad.zip\u0026#39; \u0026#39;glad_tmp\u0026#39; Move-Item -Path \u0026#39;glad_tmp\\src\\glad.c\u0026#39; -Destination \u0026#39;src\\lib\\glad.c\u0026#39; Move-Item -Path \u0026#39;glad_tmp\\include\u0026#39; -Destination \u0026#39;src\\lib\\include\u0026#39; Remove-Item -Recurse -Force \u0026#39;glad_tmp\u0026#39;   Open the \u0026quot;CMake settings\u0026quot; in Visual Studio and paste the following path to \u0026quot;CMake toolchain file\u0026quot;: -DCMAKE_TOOLCHAIN_FILE=C:\\Users\\YOUR_USERNAME\\source\\repos\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake   ","link":"https://BrickSim.org/docs/contributing/code/vs_setup_windows/","title":"Using Visual Studio 2019 on Windows"},{"body":" Download XCode from the AppStore if you haven't already Clone the repository. The cloning feature of XCode did't work correctly on my machine, so I cloned it from the command line: git clone https://www.github.com/bb1950328/BrickSim In the terminal, navigate to the cloned folder and execute ./setup_workspace.sh Because XCode doesn't have a bundled CMake, you have to install it with brew install cmake Then you can generate the XCode project files with cmake: mkdir cmake-build \u0026amp;\u0026amp; cd cmake-build \u0026amp;\u0026amp; cmake -G Xcode .. (you have to be inside the BrickSim directory) Open the BrickSim folder in XCode  ","link":"https://BrickSim.org/docs/contributing/code/xcode_setup/","title":"Using XCode on macOS"},{"body":" This Program is currently under development and shouldn't be used in a productive environment yet.\nIf you want to help, look at the contribution section in the docs.\n  BrickSim lorem ipsum\nRead the Docs Look at the screenshots\n   ","link":"https://BrickSim.org/","title":"BrickSim"},{"body":"","link":"https://BrickSim.org/categories/","title":"Categories"},{"body":"All Knowledge about BrickSim is placed inside this Section.\n","link":"https://BrickSim.org/docs/","title":"Docs"},{"body":"Here you can see how BrickSim looks and what the main features are.    ","link":"https://BrickSim.org/screenshots/","title":"Screenshots"},{"body":"","link":"https://BrickSim.org/tags/","title":"Tags"}]