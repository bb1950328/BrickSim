<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BrickSim</title><link>https://BrickSim.org/</link><description>Recent content on BrickSim</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Dec 2020 10:44:27 +0100</lastBuildDate><atom:link href="https://BrickSim.org/index.xml" rel="self" type="application/rss+xml"/><item><title>!TEXMAP Language Extension</title><link>https://BrickSim.org/docs/ldraw/texmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/ldraw/texmap/</guid><description>This page contains my interpretation of the official LDraw document. Information on this page may be wrong. Line Syntax:
0 !TEXMAP (START | NEXT) (PLANAR | CYLINDRICAL | SPHERICAL) x1 y1 z1 x2 y2 z2 x3 y3 z3 [a] [b] &amp;lt;pngfile&amp;gt; [GLOSSMAP pngfile] 0 !: &amp;lt;geometry1&amp;gt; &amp;lt;geometry2&amp;gt; 0 !TEXMAP FALLBACK &amp;lt;geometry3&amp;gt; 0 !TEXMAP END Planar Mapping There are three points specified: P1(x1, y1, z1), P2(x2, y2, z2) and P3(x3, y3, z3).</description></item><item><title>License</title><link>https://BrickSim.org/docs/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/license/</guid><description>BrickSim is licensed under GPLv3. The major reason for that choice is to prevent anyone with more resources than the maintainers and direct contributors of BrickSim from forking the project and overtaking it. With GPLv3 all forks must disclose their source too and that allows us to merge it back into the original BrickSim project.
Not all libraries BrickSim uses are under the GPLv3 license, but they are more permissive than GPLv3, so it's possible to use them.</description></item><item><title>Planned Features</title><link>https://BrickSim.org/docs/features/planned/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/features/planned/</guid><description>The following table lists all bigger features which are planned but not realized yet. Feel free to vote for them on their GitHub Issue.
Description GitHub Issue Display a transform gizmo to translate and rotate things directly inside the 3D view #2 Save the model back to a .ldr or .mpd file #3 Customizable line thickness #5 Set camera origin to part location #7 Static analysis (just here for completeness, there's a separate page for this) Milestone #1 More sophisticated part search to handle queries like title=Hello OR name=World #8</description></item><item><title>Technologies and dependencies</title><link>https://BrickSim.org/docs/technical_info/technologies_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/technical_info/technologies_dependencies/</guid><description>Logo Description License BrickSim uses C++. The main reason for this choice was execution speed. - BrickSim is built using the platform-independent build system CMake. BSD 3-clause The User Interface is made with Dear ImGui. MIT OpenGL is used for rendering on all platforms. - SQLite3 is used to save settings and cache to the disk.</description></item><item><title>Windows</title><link>https://BrickSim.org/docs/installation/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/installation/windows/</guid><description>currently, the only way to run BrickSim on Windows is to build it from source. A .exe file will be provided as soon as I have figured out how to build it in GitHub Actions on Windows.</description></item><item><title>Code structure</title><link>https://BrickSim.org/docs/technical_info/code_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/technical_info/code_structure/</guid><description>Folder Purpose /.github GitHub-specific things like Actions Workflows /.idea CLion configuration /.vscode VS Code configuration /cmake-build This folder is ignored in .gitignore. You should set the CMake build directory to /cmake-build/debug64 in the Debug 64bit configuration for example. /docs This is the root of the BrickSim.org Website. Do not edit the content of this directory, it is automatically updated when someone pushes to master in the BrickSimWeb repository.</description></item><item><title>Code style</title><link>https://BrickSim.org/docs/contributing/code/code_style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/code_style/</guid><description>A consistent code style is important for everyone. Pull requests are only accepted if they follow our code style. But don't worry, it's not that difficult. The main points are:
Reformat your code with clang-format. There is a .clang-format file in the repository root. Function and method names are in camelCase Class and struct names are in PascalCase Namespaces, files and directories are named in snake_case Headers have the extension .</description></item><item><title>Linux</title><link>https://BrickSim.org/docs/installation/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/installation/linux/</guid><description>Go to CMake Linux Build, select the topmost run and download the &amp;quot;BrickSimLinux&amp;quot; artifact. Unzip it somewhere Open the terminal and go to the folder you unzipped the files Install the package using sudo apt install ./BrickSim.deb
Maybe you will get a message like E: Unmet dependencies. Try 'apt --fix-broken install' with no packages (or specify a solution).
As the message already says, you have to execute apt --fix-broken install Run the program with BrickSim If you want to uninstall it, execute sudo apt remove bricksim</description></item><item><title>Static Analysis</title><link>https://BrickSim.org/docs/features/static_analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/features/static_analysis/</guid><description>Vision Imagine designing a large bridge with LEGO(R) parts. Wouldn't it be useful if you could see whether your construction is robust before you order the parts? Depending on that, you might even find a better solution that is stronger, uses fewer parts, or looks better.
All that should be possible - if you have the right software. Unfortunately, there's currently no software capable of doing a physics analysis of a LEGO model.</description></item><item><title>Using VS Code on Windows</title><link>https://BrickSim.org/docs/contributing/code/workspace_setup/vscode_setup_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/workspace_setup/vscode_setup_windows/</guid><description>Download MSYS2 from https://www.msys2.org/ and follow the installation instructions there. Execute the following command in a MSYS2 Shell to install git: pacman -S git add C:\msys64\mingw64\bin to PATH Download and install VS Code from here if you haven't already Install the extensions ms-vscode.cpptools and ms-vscode.cmake-tools Clone the repository by git clone --recurse-submodules -j8 https://github.com/bb1950328/BrickSim.git Run setup_workspace.sh Open the BrickSim folder in VS Code. you should get the notifications like in the following screenshot (at least the first one):</description></item><item><title>Website</title><link>https://BrickSim.org/docs/contributing/web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/web/</guid><description>The webpages are built with Hugo, a static site generator that turns markdown into HTML. The GitHub repository has a Actions workflow that automatically updates the website whenever a change is pushed to the master branch. Theoretically it's possible to just write the content and create a pull request, but if you install hugo locally you can preview your changes before you commit them. Follow this tutorial to install hugo on your system.</description></item><item><title>Code of Conduct</title><link>https://BrickSim.org/docs/contributing/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code_of_conduct/</guid><description>Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.
We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</description></item><item><title>External documents</title><link>https://BrickSim.org/docs/technical_info/documents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/technical_info/documents/</guid><description>OpenGL Khronos OpenGL Wiki OpenGL 3.3 Core Specification OpenGL Tutorial (Also available as PDF) LDraw LDraw Homepage File Format Specification !COLOUR Specification Back Face Culling Specification MPD Specification</description></item><item><title>Mac OS X</title><link>https://BrickSim.org/docs/installation/osx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/installation/osx/</guid><description>currently, the only way to run BrickSim a Mac is to build it from source. A binary file will be provided as soon as I have found someone who knows how to build software on Mac OS X.</description></item><item><title>Profiling with Palanteer</title><link>https://BrickSim.org/docs/contributing/code/palanteer_profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/palanteer_profiling/</guid><description>BrickSim uses Palanteer for instrumentation / profiling. Like all dependencies it's included as a git submodule in /src/lib/palanteer. To run BrickSim with Palanteer, you have to build it first. Read the Docs of palanteer to see how to build it. You also have to enable Palanteer in BrickSim. For that you have to enable the CMake option USE_PALANTEER.</description></item><item><title>Using VS Code on Linux</title><link>https://BrickSim.org/docs/contributing/code/workspace_setup/vscode_setup_linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/workspace_setup/vscode_setup_linux/</guid><description>This tutorial was tested on Ubuntu 20.10, but it should work too on other versions or distributions. You'll have to install packages manually if you don't have apt.
Clone the repository by git clone --recurse-submodules -j8 https://github.com/bb1950328/BrickSim.git Run setup_workspace.sh Install VS Code via a way described in the offical VS Code docs Open VS Code and install the ms-vscode.cpptools and ms-vscode.cmake-tools extensions Press Ctrl + Shift+ P and type &amp;quot;preferences: Open Settings (JSON)&amp;quot;</description></item><item><title>GitHub Actions Build</title><link>https://BrickSim.org/docs/technical_info/github_actions_build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/technical_info/github_actions_build/</guid><description>Jobs All jobs are defined in one workflow file, .github/workflows/cmake_build.yml. Splitting them into multiple smaller files is unfortunately not possible, because sharing data between different workflows is difficult.
There are three jobs which do the actual compilation buildLinux, buildWindows and buildMac. The output of these jobs are saved in Artifacts named BrickSimRawBinary_{platform} and BrickSimTests_{platform}.
The jobs testLinux and testWindows then download the BrickSimTests_{platform} artifacts and run them. They then upload the output as an artifact named UnitTestReport_{platform}</description></item><item><title>How to get the codes.txt file</title><link>https://BrickSim.org/docs/installation/get_codes_txt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/installation/get_codes_txt/</guid><description>The codes.txt file contains all parts with the colors they are available in. Because it's unclear whether it's allowed to distribute that file together with the program, you have to download it manually. It's really simple:
Go to https://www.bricklink.com/catalogDownload.asp Select &amp;quot;Part and Color Codes&amp;quot;. Also make sure &amp;quot;Tab-Delimited File&amp;quot; is selected. Click on the download button and save the file in the BrickSim folder</description></item><item><title>Using Visual Studio 2022 on Windows</title><link>https://BrickSim.org/docs/contributing/code/workspace_setup/vs_setup_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/workspace_setup/vs_setup_windows/</guid><description>Download Visual Studio 2022 from here if you haven't already Install the C++ workload. When the installer has finished, launch Visual Studio Clone the repository (https://www.github.com/bb1950328/BrickSim.git) In &amp;quot;Solution Explorer&amp;quot;, select the &amp;quot;Folder View&amp;quot;: Install vcpkg like described here. If your vcpkg root is not next to the BrickSim root, you will have to edit the toolchain path in BrickSim/CMakeSettings.json. Add the vcpkg root folder to your Path environment variable and create a new one called VCPKG_DEFAULT_TRIPLET with the value x64-windows Restart your computer Open a PowerShell, navigate to the BrickSim root folder and execute vcpkg &amp;quot;@vcpkg_rc.</description></item><item><title>Using XCode on macOS</title><link>https://BrickSim.org/docs/contributing/code/workspace_setup/xcode_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/workspace_setup/xcode_setup/</guid><description>Download XCode from the AppStore if you haven't already Execute the following command to install the XCode command line tools if you haven't already: sudo xcode-select --install Clone the repository. The cloning feature of XCode did't work correctly on my machine, so I cloned it from the command line: git clone --recurse-submodules -j8 https://www.github.com/bb1950328/BrickSim.git In the terminal, navigate to the cloned folder and execute ./setup_workspace.sh Install CMake.</description></item><item><title>Using CLion on Windows</title><link>https://BrickSim.org/docs/contributing/code/workspace_setup/clion_setup_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/docs/contributing/code/workspace_setup/clion_setup_windows/</guid><description>Download MSYS2 from https://www.msys2.org/ and follow the installation instructions there. Execute the following command in a MSYS2 Shell to install git: pacman -S git Add C:\msys64\usr\bin\ to your windows PATH environment variable. Download and install CLion if not already done. Clone the repository by git clone --recurse-submodules -j8 https://github.com/bb1950328/BrickSim.git Run setup_workspace.sh Open CLion and open the directory where you cloned BrickSim into If you haven't configured any toolchains yet, a popup named &amp;quot;Open Project Wizard&amp;quot; will open.</description></item><item><title>Screenshots</title><link>https://BrickSim.org/screenshots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BrickSim.org/screenshots/</guid><description>Here you can see how BrickSim looks and what the main features are.</description></item></channel></rss>