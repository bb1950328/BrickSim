name: CMake Build
on:
  pull_request:
  push:
    branches:
      - master
      - stable
      - installbuilder
    paths-ignore:
      - "docs/**"
      - '**/*.md'
env:
  BUILD_TYPE: Release
jobs:
  buildLinux:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip linux ci')"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, bits: 64 },
          { arch: i386, bits: 32 }
        ]

    name: Linux Build (${{ matrix.bits }} bit / ${{ matrix.arch }})

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - if: ${{ matrix.arch == 'i386' }}
      # set up multiarch
      run: sudo dpkg --add-architecture i386
    
    - name: Setup Workspace
      run: ./setup_workspace.sh only${{ matrix.bits }}bit

    - if: "contains(github.event.head_commit.message, 'codeql')"
      name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Create Build Directory
      run: mkdir -p ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}

    - run: ls -l /usr/lib | grep linux
    - run: ls -l /usr

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_LIBRARY_PATH=/usr/lib/${{ matrix.arch }}-linux-gnu
      env:
        CC: gcc-10
        CXX: g++-10
        CFLAGS: -m${{ matrix.bits }}
        LDFLAGS: -m${{ matrix.bits }}
        CXXFLAGS: -m${{ matrix.bits }}

#    - name: get info
#      run: |
#        gcc --version
#        whereis gcc
#        echo "runner.workspace: \"${{runner.workspace}}\""

    - name: Build
      working-directory: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}
      shell: bash
      run: cmake --build . --target BrickSim BrickSimTests --config $BUILD_TYPE -j $(nproc --all)

    - if: "contains(github.event.head_commit.message, 'codeql')"
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      with:
        config-file: ./.github/codeql/codeql-config.yml

    - name: BrickSimRawBinary
      uses: actions/upload-artifact@v2
      with:
        name: BrickSimRawBinary_Linux${{ matrix.bits }}
        path: |
          ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}/BrickSim

    - name: Upload BrickSimTests
      uses: actions/upload-artifact@v2
      with:
        name: BrickSimTests_Linux${{ matrix.bits }}
        path: ${{runner.workspace}}/BrickSim/cmake-build/release${{ matrix.bits }}/src/test/BrickSimTests
  test:
    #todo run tests for 32 bit also
    name: Catch2 Unittests
    needs: buildLinux
    runs-on: ubuntu-latest
    steps:
      - name: Download test artifact
        uses: actions/download-artifact@v2
        with:
          name: BrickSimTests_Linux64
      - name: Download libraries
        run: sudo apt-get install -y libspdlog1 libzip5
      - name: Make tests executable
        run: chmod a+x ${{runner.workspace}}/BrickSim/BrickSimTests
      - name: Run tests with JUnit XML output
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -r junit > ${{runner.workspace}}/junitTestReport.xml
      - name: Run tests with Catch2 XML output
        if: always()
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -d yes -r xml > ${{runner.workspace}}/catchTestReport.xml
      - run: cat ${{runner.workspace}}/catchTestReport.xml
        if: always()
      - name: Run tests with Console output
        if: failure()
        run: ${{runner.workspace}}/BrickSim/BrickSimTests -d yes

      - name: Publish Test Result Comment
        if: always() # todo maybe change this to failure() so commits without failing tests aren't commented
        run: |
          pip3 install PyGithub
          wget -O ${{runner.workspace}}/publish_test_results.py https://raw.githubusercontent.com/bb1950328/BrickSim/master/.github/workflows/publish_test_results.py
          python3 ${{runner.workspace}}/publish_test_results.py ${{runner.workspace}}/catchTestReport.xml ${{ github.token }} ${{ github.sha }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: UnitTestReport
          path: ${{runner.workspace}}/junitTestReport.xml
  publishTestResults:
    name: Publish Catch2 Test Results
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: UnitTestReport
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: ./**/*.xml
          check_name: Catch2 Test Results
          comment_title: Catch2 Test Results

  makeInstallerLinux:
    needs: buildLinux
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: [
          { arch: x86_64, bits: 64 },
          { arch: i386, bits: 32 }
        ]

    name: Linux Installer Build (${{ matrix.bits }} bit / ${{ matrix.arch }})

    steps:
      - name: Install InstallBuilder
        working-directory: ${{ runner.workspace }}
        run: |
          wget https://installbuilder.com/installbuilder-enterprise-21.3.0-linux-x64-installer.run -O installbuilder_installer.run
          chmod a+x installbuilder_installer.run
          ./installbuilder_installer.run --mode unattended --prefix ${{ runner.workspace }}/installbuilder
          rm installbuilder_installer.run

      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: BrickSimRaw_Linux${{ matrix.bits }}
          path: ${{ runner.workspace }}/artifacts

      - name: Create build directory and copy raw binary to it
        run: |
          mkdir -p $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}
          cp ${{ runner.workspace }}/artifacts/BrickSim $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}
          chmod a+x $GITHUB_WORKSPACE/cmake-build/release${{ matrix.bits }}/BrickSim

      - name: Build Installer
        run: |
          if [[ ${{ matrix.bits }} -eq 32 ]]; then
            PLATFORM="linux"
          else
            PLATFORM="linux-x64"
          fi
          ${{ runner.workspace }}/installbuilder/bin/builder build $GITHUB_WORKSPACE/InstallBuilder.xml $PLATFORM \
                        --setvars project.version=$($GITHUB_WORKSPACE/scripts/get_git_tag.sh | tr -d v)

      - name: check output directory
        run: ls -l ${{ runner.workspace }}/installbuilder/output


  buildWindows:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip windows ci')"
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64, bits: 64 },
          { msystem: MINGW32, arch: i686, bits: 32 }
        ]

    name: Windows Build (${{ matrix.bits }} bit / ${{ matrix.arch }})

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            git
            unzip
            mingw-w64-${{ matrix.arch }}-toolchain
            base-devel
            mingw-w64-${{ matrix.arch }}-cmake
            libcurl-devel
            mingw-w64-${{ matrix.arch }}-freeglut
            mingw-w64-${{ matrix.arch }}-glm

      - name: Setup workspace
        run: ./setup_workspace.sh only${{ matrix.bits }}bit

      - name: Build
        env:
          CC: /C/msys64/mingw${{ matrix.bits }}/bin/gcc.exe
          CXX: /C/msys64/mingw${{ matrix.bits }}/bin/g++.exe
        run: |
          mkdir -p cmake-build/release${{ matrix.bits }}
          cd cmake-build/release${{ matrix.bits }}
          cmake -G "MSYS Makefiles" ../.. -DCMAKE_PREFIX_PATH=/C/mingw64 -DCMAKE_MAKE_PROGRAM=/C/msys64/usr/bin/make.exe \
            -DGIT_COMMIT_HASH:STRING=$(./scripts/get_git_commit_hash.sh) -DGIT_COMMIT_COUNT:STRING=$(../../scripts/get_git_commit_count.sh) \
            -DTOTAL_HOURS:STRING=$(../../scripts/get_git_total_hours.sh) -DGIT_VERSION_TAG:STRING=$(../../scripts/get_git_tag.sh)
          cmake --build . --target BrickSim --config Release  -j $(nproc --all)
      - if: always()
        run: |
          cd cmake-build/release${{ matrix.bits }}
          cat CMakeFiles/CMakeOutput.log
          cat CMakeFiles/CMakeError.log

      - name: Try to find binary
        working-directory: ${{runner.workspace}}
        run: find . -name "*.exe"

      - name: Upload BrickSim
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimWindows${{ matrix.bits }}
          # todo include README.md
          path: ${{runner.workspace}}\BrickSim\cmake-build\release${{ matrix.bits }}\BrickSim.exe

  buildMac:
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip mac ci')"
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Workspace
        run: ./setup_workspace.sh

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        env:
          CC: clang
          CXX: clang++

      - name: get info
        run: |
          gcc --version
          whereis gcc
          echo "runner.workspace: \"${{runner.workspace}}\""

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --target BrickSim --config $BUILD_TYPE -j $(nproc --all)

      - name: Create bundle using CPack
        if: false #TODO configure CPack correctly so it produces a bundle file
        run: cpack --config ${{runner.workspace}}/build/CPackConfig.cmake

      - name: list files
        run: ls -R ${{runner.workspace}}

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: BrickSimMac
          path: |
            ${{runner.workspace}}/BrickSim/README.md
            ${{runner.workspace}}/build/BrickSim
